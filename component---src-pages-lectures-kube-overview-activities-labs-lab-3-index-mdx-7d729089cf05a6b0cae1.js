(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{"013z":function(e,t,a){"use strict";var n=a("q1tI"),o=a.n(n),r=a("NmYn"),i=a.n(r),l=a("Wbzz"),c=a("Xrax"),b=a("k4MR"),s=a("TSYQ"),d=a.n(s),u=a("QH2O"),p=a.n(u),m=a("qKvR");var h=e=>{let{title:t,theme:a,tabs:n=[]}=e;return Object(m.b)("div",{className:d()(p.a.pageHeader,{[p.a.withTabs]:n.length,[p.a.darkMode]:"dark"===a})},Object(m.b)("div",{className:"bx--grid"},Object(m.b)("div",{className:"bx--row"},Object(m.b)("div",{className:"bx--col-lg-12"},Object(m.b)("h1",{id:"page-title",className:p.a.text},t)))))},O=a("BAC9");var j=e=>{let{relativePagePath:t,repository:a}=e;const{site:{siteMetadata:{repository:n}}}=Object(l.useStaticQuery)("1364590287"),{baseUrl:o,subDirectory:r,branch:i}=a||n,c=o+"/edit/"+i+r+"/src/pages"+t;return o?Object(m.b)("div",{className:"bx--row "+O.row},Object(m.b)("div",{className:"bx--col"},Object(m.b)("a",{className:O.link,href:c},"Edit this page on GitHub"))):null},g=a("FCXl"),x=a("dI71"),v=a("I8xM");var f=function(e){function t(){return e.apply(this,arguments)||this}return Object(x.a)(t,e),t.prototype.render=function(){const{title:e,tabs:t,slug:a}=this.props,n=a.split("/").filter(Boolean).slice(-1)[0],o=t.map(e=>{const t=i()(e,{lower:!0,strict:!0}),o=t===n,r=new RegExp(n+"/?(#.*)?$"),c=a.replace(r,t);return Object(m.b)("li",{key:e,className:d()({[v.selectedItem]:o},v.listItem)},Object(m.b)(l.Link,{className:v.link,to:""+c},e))});return Object(m.b)("div",{className:v.tabsContainer},Object(m.b)("div",{className:"bx--grid"},Object(m.b)("div",{className:"bx--row"},Object(m.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(m.b)("nav",{"aria-label":e},Object(m.b)("ul",{className:v.list},o))))))},t}(o.a.Component),N=a("MjG9"),y=a("CzIb"),T=a("Asxa"),w=a("OIbQ"),k=a.n(w);var P=e=>{let{date:t}=e;const a=new Date(t);return t?Object(m.b)(T.c,{className:k.a.row},Object(m.b)(T.a,null,Object(m.b)("div",{className:k.a.text},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null};t.a=e=>{let{pageContext:t,children:a,location:n,Title:o}=e;const{frontmatter:r={},relativePagePath:s,titleType:d}=t,{tabs:u,title:p,theme:O,description:x,keywords:v,date:T}=r,{interiorTheme:w}=Object(y.a)(),{site:{pathPrefix:k}}=Object(l.useStaticQuery)("2456312558"),C=k?n.pathname.replace(k,""):n.pathname,I=u?C.split("/").filter(Boolean).slice(-1)[0]||i()(u[0],{lower:!0}):"",H=O||w;return Object(m.b)(b.a,{tabs:u,homepage:!1,theme:H,pageTitle:p,pageDescription:x,pageKeywords:v,titleType:d},Object(m.b)(h,{title:o?Object(m.b)(o,null):p,label:"label",tabs:u,theme:H}),u&&Object(m.b)(f,{title:p,slug:C,tabs:u,currentTab:I}),Object(m.b)(N.a,{padded:!0},a,Object(m.b)(j,{relativePagePath:s}),Object(m.b)(P,{date:T})),Object(m.b)(g.a,{pageContext:t,location:n,slug:C,tabs:u,currentTab:I}),Object(m.b)(c.a,null))}},BAC9:function(e,t,a){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,t,a){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},OIbQ:function(e,t,a){e.exports={bxTextTruncateEnd:"last-modified-date-module--bx--text-truncate--end--123zi",bxTextTruncateFront:"last-modified-date-module--bx--text-truncate--front--3xeKz",text:"last-modified-date-module--text--24m-4",row:"last-modified-date-module--row--2BquN"}},QH2O:function(e,t,a){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",darkMode:"PageHeader-module--dark-mode--hBrwL",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}},xjyh:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return l})),a.d(t,"default",(function(){return u}));var n=a("wx14"),o=a("Ff2n"),r=(a("q1tI"),a("7ljp")),i=a("013z");a("qKvR");const l={},c=(b="InlineNotification",function(e){return console.warn("Component "+b+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",e)});var b;const s={_frontmatter:l},d=i.a;function u(e){let{components:t}=e,a=Object(o.a)(e,["components"]);return Object(r.b)(d,Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",null,"Problem"),Object(r.b)("p",null,"This service has already been packaged into a container image, but there is one special requirement:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The legacy app is hard-coded to only serve content on port ",Object(r.b)("inlineCode",{parentName:"li"},"8989"),", but the team wants to be able to access the service using the standard port ",Object(r.b)("inlineCode",{parentName:"li"},"80"),".")),Object(r.b)("p",null,"Your task is to build a Kubernetes pod that runs this legacy container and uses the ambassador design pattern to expose access to the service on port ",Object(r.b)("inlineCode",{parentName:"p"},"80"),"."),Object(r.b)("p",null,"This setup will need to meet the following specifications:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The pod should have the name ",Object(r.b)("inlineCode",{parentName:"li"},"vader-service"),"."),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"vader-service")," pod should have a container that runs the legacy vader service image: ",Object(r.b)("inlineCode",{parentName:"li"},"ibmcase/millennium-falcon:1"),"."),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"vader-service")," pod should have an ambassador container that runs the ",Object(r.b)("inlineCode",{parentName:"li"},"haproxy:1.7")," image and proxies incoming traffic on port ",Object(r.b)("inlineCode",{parentName:"li"},"80")," to the legacy service on port ",Object(r.b)("inlineCode",{parentName:"li"},"8989")," (the HAProxy configuration for this is provided below)."),Object(r.b)("li",{parentName:"ul"},"Port ",Object(r.b)("inlineCode",{parentName:"li"},"80")," should be exposed as a ",Object(r.b)("inlineCode",{parentName:"li"},"containerPort"),".")),Object(r.b)(c,{mdxType:"InlineNotification"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note"),": You do not need to expose port 8989")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The HAProxy configuration should be stored in a ConfigMap called ",Object(r.b)("inlineCode",{parentName:"li"},"vader-service-ambassador-config"),"."),Object(r.b)("li",{parentName:"ul"},"The HAProxy config should be provided to the ambassador container using a volume mount that places the data from the ConfigMap in a file at /usr/local/etc/haproxy/haproxy.cfg.\nhaproxy.cfg should contain the following configuration data:")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"global\n    daemon\n    maxconn 256\n\ndefaults\n    mode http\n    timeout connect 5000ms\n    timeout client 50000ms\n    timeout server 50000ms\n\nlisten http-in\n    bind *:80\n    server server1 127.0.0.1:8989 maxconn 32\n")),Object(r.b)("p",null,"Once your pod is up and running, itâ€™s a good idea to test it to make sure you can access the service from within the cluster using port 80. In order to do this, you can create a busybox pod in the cluster, and then run a command to attempt to access the service from within the busybox pod."),Object(r.b)("p",null,"Create a descriptor for the busybox pod called ",Object(r.b)("inlineCode",{parentName:"p"},"busybox.yml")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\nspec:\n  containers:\n  - name: myapp-container\n    image: radial/busyboxplus:curl\n    command: ['sh', '-c', 'while true; do sleep 3600; done']\n")),Object(r.b)("p",null,"Create the busybox testing pod."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"kubectl apply -f busybox.yml\n")),Object(r.b)("p",null,"Use this command to access ",Object(r.b)("inlineCode",{parentName:"p"},"vader-service")," using port 80 from within the busybox pod."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"kubectl exec busybox -- curl $(kubectl get pod vader-service -o=custom-columns=IP:.status.podIP --no-headers):80\n")),Object(r.b)("p",null,"If the service is working, you should get a message that the hyper drive of the millennium falcon needs repair."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Relevant Documentation:")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/cluster-administration/logging/#using-a-sidecar-container-with-the-logging-agent"},"Kubernetes Sidecar Logging Agent")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/"},"Shared Volumes")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/"},"Distributed System Toolkit Patterns"))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-lectures-kube-overview-activities-labs-lab-3-index-mdx-7d729089cf05a6b0cae1.js.map